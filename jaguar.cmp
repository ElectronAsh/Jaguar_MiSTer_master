-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Intel and sold by Intel or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Thu Oct 18 00:27:08 2018

COMPONENT jaguar
	PORT
	(
		xresetl		:	 IN STD_LOGIC;
		sys_clk		:	 IN STD_LOGIC;
		dram_a		:	 OUT STD_LOGIC_VECTOR(0 TO 9);
		dram_ras_n		:	 OUT STD_LOGIC;
		dram_cas_n		:	 OUT STD_LOGIC;
		dram_oe_n		:	 OUT STD_LOGIC_VECTOR(0 TO 3);
		dram_uw_n		:	 OUT STD_LOGIC_VECTOR(0 TO 3);
		dram_lw_n		:	 OUT STD_LOGIC_VECTOR(0 TO 3);
		dram_d		:	 OUT STD_LOGIC_VECTOR(0 TO 63);
		dram_q		:	 IN STD_LOGIC_VECTOR(0 TO 63);
		dram_oe		:	 IN STD_LOGIC_VECTOR(0 TO 3);
		ram_rdy		:	 IN STD_LOGIC;
		DBG_CPU_RDEN		:	 OUT STD_LOGIC;
		DBG_CPU_WREN		:	 OUT STD_LOGIC;
		DBG_CPU_DTACK		:	 OUT STD_LOGIC;
		DBG_CPU_BENA		:	 OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		DBG_CPU_ADDR		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		DBG_CPU_RDATA		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		DBG_CPU_WDATA		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		DBG_REG_ADDR		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		DBG_REG_WREN		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		DBG_REG_DATA		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		DBG_SR_REG		:	 OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		DBG_PC_REG		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		DBG_USP_REG		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		DBG_SSP_REG		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		DBG_CYCLES		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		DBG_IFETCH		:	 OUT STD_LOGIC;
		os_rom_a		:	 OUT STD_LOGIC_VECTOR(16 DOWNTO 0);
		os_rom_ce_n		:	 OUT STD_LOGIC;
		os_rom_oe_n		:	 OUT STD_LOGIC;
		os_rom_q		:	 IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		os_rom_oe		:	 IN STD_LOGIC;
		cart_a		:	 OUT STD_LOGIC_VECTOR(23 DOWNTO 0);
		cart_ce_n		:	 OUT STD_LOGIC;
		cart_oe_n		:	 OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
		cart_q		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		cart_oe		:	 IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		fdram		:	 OUT STD_LOGIC;
		vga_bl		:	 OUT STD_LOGIC;
		vga_vs_n		:	 OUT STD_LOGIC;
		vga_hs_n		:	 OUT STD_LOGIC;
		vga_r		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		vga_g		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		vga_b		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		aud_l		:	 OUT STD_LOGIC;
		aud_r		:	 OUT STD_LOGIC
	);
END COMPONENT;